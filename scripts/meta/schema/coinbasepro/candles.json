{
	"api": "coinbasepro",
	"model": "candles",
	"modelDescription": "Candles are the historic rates for a product. Rates are returned in grouped buckets. Candle schema is of the form `[timestamp, price_low, price_high, price_open, price_close]`",
	"endpoints": [
		{
			"path": "/products/{product_id}/candles",
			"documentation": "https://docs.cloud.coinbase.com/exchange/reference/exchangerestapi_getproductcandles",
			"httpMethod": "GET",
			"enumRoot": "Candles",
			"description": "Candles will return historic rates for a product.",
			"queryParams": [
				{
					"identifier": "granularity",
					"goType": "Granularity",
					"description": "Granularity is one of the following values: {60, 300, 900, 3600, 21600, 86400}. Otherwise, your request will be rejected. These values correspond to timeslices representing one minute, five minutes, fifteen minutes, one hour, six hours, and one day, respectively."
				},
				{
					"identifier": "start",
					"goType": "string",
					"description": "Start is a timestamp for starting range of aggregations."
				},
				{
					"identifier": "end",
					"goType": "string",
					"description": "End is a timestamp for ending range of aggregations."
				}
			]
		}
	],
	"nonStruct": "[]*Candle",
	"modelFields": [],
	"customUnmarshaler": "func (candles *Candles) UnmarshalJSON(bytes []byte) error { var raw [][]float64; if err := json.Unmarshal(bytes, &raw); err != nil { return err; }; for _, r := range raw { candle := new(Candle); candle.Unix = int64(r[0]); candle.PriceLow = r[1]; candle.PriceHigh = r[2]; candle.PriceOpen = r[3]; candle.PriceClose = r[4]; candle.Volume = r[5]; *candles = append(*candles, candle); }; return nil; }"
}
